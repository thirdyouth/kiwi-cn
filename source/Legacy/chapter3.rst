*************************************************************
第三章：基本工作流程
*************************************************************

Linux 系统的安装通常出现在从一个安装源进行目标系统引导过程中，如安装光盘，启动光盘，或者进入 PXE 引导环境。安装过程通常有一个安装程序驱动，跟用户进行交互，获取安装信息。安装信息通常包括将要安装的 *软件* ， *时区* 信息，系统 *用户* 数据，以及其他信息。在安装程序获取到所有的信息后，将会从可用的软件源（库）获取相应的包，将必须的基础软件和指定的程序安装到到系统。在安装完成后，系统将会重新启动，并且在启动时，对系统进行配置。配置过程会完全的自动处理，或者可能需要用户进行交互配置。

一个系统镜像（通常称为“镜像”）是一个包含了可以进行 *完整安装* 的 Linux 系统的文件。镜像代表一个操作系统，并且可能包含 *最终* 的配置。

在进行部署时，镜像的部署方式根据其类型和配置会有所不同，因为 KIWI 允许对镜像的初始化启动方式进行完全的定制。这些方式也包括：

* 允许直接将镜像部署到已有的虚拟环境，而无需任何启动配置。
* 在已知目标环境中自动进行配置的镜像。
* 允许用户在首次启动时对镜像进行配置。

基于 KIWI 的镜像在创建过程中自动执行，不需要任何用户交互。镜像创建所需要的信息由主配置文件 :file:`config.xml` 提供。镜像也可以选择使用 :file:`config.sh` 和 :file:`images.sh` 脚本进行进行定制。其他的定制可以使用可选的 *overlay* 树（目录），即 root 来完成。


.. note:: 知识储备

   该手册假定您了解 Linux 的基本内容，包括启动过程，和发行内容，如包管理。

构建镜像
===============================

KIWI 创建镜像需要两个步骤。第一步，*准备* 操作，基于 :file:`config.xml` 配置文件中提供的信息创建一个所谓的 *未打包* 镜像树（目录）。描述 KIWI 创建镜像的 :file:`config.xml` 文件属于 *配置* 目录（树）的一部分。

第二步， *创建* 操作，创建 *打包镜像* ，或者创建基于未打包镜像和未打包镜像的 :file:`image/` 目录中 :file:`config.xml` 文件所提供信息中指定格式的 *镜像*。

.. image:: data/intro.png
  :width: 80%
  :align: center

1. 封装系统，以目录/文件树存在
2. 封装系统，以镜像文件存在

在开始构建 KIWI 镜像之前，有必要对镜像构成，Linux常规内容，包括启动流程，以及发行版内容，如包管理有一个基本的认识。




构建过程
===============================

KIWI 的镜像创建分为两步。第一部称为 *准备* 步骤，在第二步 *创建* 开始之前必须成功完成。在准备过程中，KIWI 创建一个根目录，或者所谓的 *未打包* 镜像。新的根目录在指定的目录中创建，该目录由命令行参数 :option:`--root` 或者 :file:`config.xml` 文件中的的 :option:`defaultroot` 项指定。该目录将会是镜像创建过程中所有安装软件包的目标安装目录。对于包的安装，KIWI 依赖于 :file:`config.xml` 文件中的的 :option:`packagemanager` 参数指定的包管理程序。目前，KIWI 支持 *smart*，*zypper*，*yum* 和 *apt* 包管理程序。准备过程主要执行如下几个主要的步骤：

* **创建目标根目录** 。如果目标根目录已经存在，KIWI 将会出现错误，并阻止对已经存在的未打包镜像的意外删除。使用 :option:`--force-new-root` 命令行参数将会强制删除已有目标目录，并且在新的目录以同样的名字创建未打包镜像。

* **安装软件包** 。首先，KIWI 配置用于镜像创建的包管理器（默认为 zypper）使用配置文件或者命令行中指定的源码库。然后在 *bootstrap* 部分指定的包的源码库将会安装到临时工作空间用于扩展根目录树。这些指定为 bootstrap 环境的一部分的
特殊包时 *文件系统* 和 *glibc-locale* 包。这两个包的依赖条件是满足 bootstrap 环境所有需要软件包来支持包安装到新的根目录的必要条件。通过选定的包管理器来安装软件包将会安装一些您不希望安装的包到镜像中。您可以在 **packages** 项的子条目下将每个您希望删除的包的 *type* 属性设置为 *delete* 来对他们进行删除。

* **应用覆盖目录** 。在包管理器完成包安装之后，KIWI 将会应用配置目录中命名为 *root* 的覆盖目录中的所有文件和目录到目标根目录。这将允许您覆盖之前安装过程中所安装的包所安装的任何文件。这些文件和目录将会以它们在 root 目录中同样的位置出现在未打包镜像树中。 

* **应用压缩包** 。在 :file:`config.xml` 文件的 *archive* 元素中指定的任何压缩包在覆盖目录复制操作完成之后将会依次序被应用。压缩包将会解压到新的根目录，其中的文件将会根据它们在压缩包中的路径复制到相应位置。与应用覆盖目录一样，它可能会覆盖目标目录中的任何文件。

* **执行用户定义的 config.sh 脚本** 。在 *准备* 阶段的最后，将会在目标根目录中执行可选的脚本 :file:`config.sh` 。该脚本的主要目的在于完成系统配置，如服务激活。更多有关预定义配置功能的详细描述，请参考 `kiwi::config.sh(1) <https://doc.opensuse.org/projects/kiwi/doc/#ref.kiwi.config.sh>`_ man 手册。

* **管理新根目录** 。

成功完成 *准备* 步骤，是镜像构建过程中后续的创建步骤的准备要求。在镜像准备成功完成后，未打包的根目录将被认为是完整和稳定的。最终的打包镜像的创建则需要执行 *创建* 步骤。多个镜像可以在同一个根目录进行打包创建，例如，可以从同一个未打包根目录创建一个自安装的 OEM 镜像和一个虚拟机镜像，在这种情况下，在准备过程执行时，需要在 :file:`config.xml` 文件中指定两种镜像类型。在 *创建* 过程中，KIWI 将会执行如下主要的操作：

* **执行用户定义的 images.sh 脚本** 。在镜像创建过程最开始，可能会在未打包镜像目录中执行可选脚本 :file:`images.sh` 。与 :file:`config.sh` 不同， :file:`images.sh` 脚本没有确切用途。该脚本通常用于删除最终镜像中所不需要的文件。例如，如果某个应用是为指定的硬件构建，就可以使用该脚本删除其中不必要的内核驱动。请参考 `kiwi::config.sh(1) <https://doc.opensuse.org/projects/kiwi/doc/#ref.kiwi.images.sh>`_ man 手册了解 :file:`images.sh` 中可用预定义函数的详细描述。 

* **创建要求的镜像类型** 。一个准备好的镜像目录可以创建的镜像类型由镜像描述文件 :file:`config.xml` 中指定的类型来确定。配置文件必须包含至少一个 *type* 元素，下图展示了目前支持的镜像类型：

  .. figure:: data/intro.png
    :scale: 80%
    :alt: 镜像类型
    
  1. 可启动 CD/DVD 光盘，U 盘。
  2. 可用于虚拟环境的系统，如VMware，Xen，Amazon Cloud，KVM 等。
  3. 用于安装媒体 CD/DVD 光盘，U 盘的预加载系统。
  4. 网络启动镜像。KIWI 同时通过 kiwi-pxeboot 包提供 bootp 环境。
    
更详细的信息，包括有关 :command:`kiwi` 指令使用时每一步的指令和构建指定镜像，以及支持镜像类型配置等，都将在后续部分进行讲述。

启动过程
===============================

启动镜像钩子脚本
===============================

启动镜像定制
===============================


启动参数
===============================

常规和发行制定代码
===============================
